<!DOCTYPE html>
<html>
<head>
  <title>User Management - WhatsApp Gateway</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Tailwind CDN -->
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>
<body class="bg-[#fcf5eb] min-h-screen">
  <%- include('partials/topnav', { user: user, isUsers: true }) %>
  <main class="w-full items-center justify-center flex flex-col gap-6 pt-20">
    <section id="users" class="mb-6 min-w-4xl">
      <div class="w-full bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800 overflow-hidden">
        <table class="w-full text-sm">
          <thead>
            <tr class="bg-gray-200 text-gray-700">
              <th class="py-4 px-4 text-left">User</th>
              <th class="py-4 px-4 text-center">Role</th>
              <th class="py-4 px-4 text-center">Company</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="userTable">
            <tr>
              <td colspan="4" class="text-center py-4 text-gray-400">Loading data...</td>
            </tr>
          </tbody>
        </table>
      </div>
    </section>
  </main>

  <!-- Custom Confirm Modal -->
  <div id="confirmModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 hidden">
    <div class="bg-white/50 backdrop-blur-md rounded-2xl shadow-xl p-8 max-w-sm w-full text-center">
      <h3 class="text-lg font-semibold mb-4 text-gray-800" id="confirmModalTitle">Confirm Action</h3>
      <p class="mb-6 text-gray-700" id="confirmModalMessage">Are you sure you want to proceed?</p>
      <div class="flex justify-center gap-4">
        <button id="confirmModalCancel" class="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold transition-all cursor-pointer">Cancel</button>
        <button id="confirmModalOk" class="px-4 py-2 rounded-full bg-red-500 hover:bg-red-600 text-white font-semibold transition-all cursor-pointer">Yes, Delete</button>
      </div>
    </div>
  </div>

  <!-- Custom Password Modal -->
  <div id="passwordModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 hidden">
    <div class="bg-white/50 backdrop-blur-md rounded-2xl shadow-xl p-8 max-w-sm w-full text-center relative">
      <button id="closePasswordModal" class="absolute top-1 right-1 flex cursor-pointer" title="Close"><img src="icons/close-circle.svg" class="h-6 w-6 inline-block transition-all hover:scale-[1.02] active:scale-95"></button>
      <h3 class="text-lg font-semibold mb-4 text-gray-800">Password Reset</h3>
      <p class="mb-4 text-gray-700">New password for <span id="passwordModalUser" class="font-bold"></span></p>
      <div class="flex items-center justify-center gap-2 mb-6">
        <input id="passwordModalValue" type="text" readonly class="rounded-full px-4 py-2 text-center text-sm font-mono bg-gray-100" style="width: 180px;" />
        <button id="copyPasswordBtn" class="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-500 hover:text-gray-800 text-sm font-semibold transition-all cursor-pointer">Copy</button>
      </div>
    </div>
  </div>

  <script>
    async function loadUsers() {
      const res = await fetch('/api/users');
      const data = await res.json();
      const tbody = document.getElementById('userTable');
      tbody.innerHTML = '';
      if (data.users && data.users.length > 0) {
        data.users.forEach(u => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td class="py-4 px-4">
              <div class="inline-flex items-center">
                <img src="https://ui-avatars.com/api/?name=${u.username}" alt="User Avatar" class="w-8 h-8 rounded-full border border-gray-300 mr-2">
                <span class="text-md text-gray-700">${u.username}</span>
              </div>
            </td>
            <td class="py-4 px-4 text-center">
              <div class="inline-flex items-center ${u.role === 'admin' ? 'bg-purple-300/20' : 'bg-blue-300/20'} px-2 py-2 rounded-full">
                <span class="inline-block w-3 h-3 rounded-full ${u.role === 'admin' ? 'bg-purple-500' : 'bg-blue-400'}"></span>
                <span class="px-4 text-sm font-semibold ${u.role === 'admin' ? 'text-purple-600' : 'text-blue-600'}">${u.role}</span>
              </div>
            </td>
            <td class="py-4 px-4 text-center">
              <span class="text-sm text-gray-600">${u.company || '-'}</span>
            </td>
            <td class="py-4 px-4 flex flex-row gap-2 justify-end items-center">
              <button type="button" onclick="resetPassword('${u.username}')"
                class="bg-white hover:bg-gray-50 text-gray-600 py-2 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
                Reset Password
              </button>
              <button type="button" onclick="deleteUser('${u.username}')"
                class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
                <img src="icons/trash-bin-trash.svg" class="h-5 w-5 inline-block">
              </button>
            </td>
          `;
          tbody.appendChild(tr);
        });
      } else {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center py-4 text-gray-400">No users found.</td></tr>';
      }
    }
    loadUsers();

    // Custom Confirm Modal Logic
    function showCustomConfirm({ title = "Confirm", message = "Are you sure?", okText = "OK", cancelText = "Cancel" }) {
      return new Promise((resolve) => {
        const modal = document.getElementById('confirmModal');
        document.getElementById('confirmModalTitle').textContent = title;
        document.getElementById('confirmModalMessage').textContent = message;
        document.getElementById('confirmModalOk').textContent = okText;
        document.getElementById('confirmModalCancel').textContent = cancelText;
        modal.classList.remove('hidden');

        function cleanup(result) {
          modal.classList.add('hidden');
          okBtn.removeEventListener('click', okHandler);
          cancelBtn.removeEventListener('click', cancelHandler);
          resolve(result);
        }

        const okBtn = document.getElementById('confirmModalOk');
        const cancelBtn = document.getElementById('confirmModalCancel');
        function okHandler() { cleanup(true); }
        function cancelHandler() { cleanup(false); }
        okBtn.addEventListener('click', okHandler);
        cancelBtn.addEventListener('click', cancelHandler);
      });
    }

    async function deleteUser(username) {
      const confirmed = await showCustomConfirm({
        title: "Delete User",
        message: `Are you sure you want to delete user "${username}"?`,
        okText: "Yes, Delete",
        cancelText: "Cancel"
      });
      if (!confirmed) return;
      
      try {
        const res = await fetch(`/users/${username}`, {
          method: 'DELETE'
        });
        const data = await res.json();
        showTWToast({ type: data.status === 'success' ? 'success' : 'error', message: data.message });
        if (data.status === 'success') {
          loadUsers();
        }
      } catch (err) {
        showTWToast({ type: 'error', message: 'Failed to delete user' });
      }
    }

    async function resetPassword(username) {
      const confirmed = await showCustomConfirm({
        title: "Reset Password",
        message: `Are you sure you want to reset password for user \"${username}\"?`,
        okText: "Yes, Reset",
        cancelText: "Cancel"
      });
      if (!confirmed) return;
      
      try {
        const res = await fetch(`/users/${username}/reset-password`, {
          method: 'POST'
        });
        const data = await res.json();
        if (data.status === 'success') {
          // Show password modal
          showPasswordModal(username, data.newPassword);
        } else {
          showTWToast({ type: 'error', message: data.message });
        }
      } catch (err) {
        showTWToast({ type: 'error', message: 'Failed to reset password' });
      }
    }

    function showPasswordModal(username, password) {
      const modal = document.getElementById('passwordModal');
      document.getElementById('passwordModalUser').textContent = username;
      const pwInput = document.getElementById('passwordModalValue');
      pwInput.value = password;
      modal.classList.remove('hidden');
      // Copy button
      document.getElementById('copyPasswordBtn').onclick = function() {
        navigator.clipboard.writeText(password);
        this.textContent = 'Copied!';
        setTimeout(() => { this.textContent = 'Copy'; }, 1500);
      };
      // Close button
      document.getElementById('closePasswordModal').onclick = function() {
        modal.classList.add('hidden');
      };
    }

    // Handle Add User form submit
    document.querySelector('form[action="/register"]').addEventListener('submit', async function(e) {
      e.preventDefault();
      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());
      
      if (data.password !== data.confirmPassword) {
        showTWToast({ type: 'error', message: 'Passwords do not match' });
        return;
      }

      try {
        const res = await fetch('/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const result = await res.json();
        
        if (result.status === 'success') {
          showTWToast({ type: 'success', message: 'User added successfully' });
          this.reset();
          loadUsers();
        } else {
          showTWToast({ type: 'error', message: result.message });
        }
      } catch (err) {
        showTWToast({ type: 'error', message: 'Failed to add user' });
      }
    });
  </script>
</body>
</html> 