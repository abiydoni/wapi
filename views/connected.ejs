<!DOCTYPE html>
<html>
  <head>
    <title>Connected!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  </head>
  <body class="bg-[#fcf5eb] min-h-screen items-center justify-center">
    <%- include('partials/topnav', { user: user }) %>
    <main class="w-full mt-4 px-4 md:px-12 py-4">
      <!-- 3 Column Layout -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-7xl mx-auto">
        <!-- Column 1: Send Message + Bot Monitor -->
        <div class="flex flex-col gap-4">
          <!-- Send Message Card - Diperkecil -->
          <div
            class="bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800"
          >
            <div class="flex flex-col p-4 h-full">
              <h2 class="text-base font-semibold text-[#3be676] mb-2">
                Send Message
              </h2>
              <label class="text-xs text-gray-600 mb-2">
                Sender : <span class="text-xs font-bold"><%= numberId %></span>
              </label>
              <form id="sendForm" class="flex flex-col gap-2">
                <div class="flex items-center gap-3 mb-2">
                  <label class="text-xs text-gray-600">Send to</label>
                  <label class="inline-flex items-center">
                    <input
                      type="radio"
                      name="sendType"
                      id="sendTypeNumber"
                      value="number"
                      class="form-radio accent-gray-800"
                      checked
                    />
                    <span class="ml-1 text-xs text-gray-700">Number</span>
                  </label>
                  <label class="inline-flex items-center">
                    <input
                      type="radio"
                      name="sendType"
                      id="sendTypeGroup"
                      value="group"
                      class="form-radio accent-gray-800"
                    />
                    <span class="ml-1 text-xs text-gray-700">Group</span>
                  </label>
                </div>
                <input
                  type="text"
                  id="phoneNumber"
                  placeholder="Recipient Number (e.g. 08xxxx or 628xxxx)"
                  required
                  class="border border-gray-800 rounded-full px-3 py-1.5 mb-2 text-sm"
                />
                <div class="relative">
                  <textarea
                    id="message"
                    placeholder="Type your message..."
                    required
                    class="border border-gray-800 rounded-[15px] px-3 py-2 resize-none h-20 w-full pr-10 text-sm"
                  ></textarea>
                  <button
                    type="submit"
                    class="absolute bottom-2 right-2 bg-white hover:bg-gray-50 text-gray-600 font-semibold py-1 px-3 rounded-full border border-gray-800 shadow-sm hover:shadow-md transition-all cursor-pointer"
                  >
                    <img src="icons/send-1.svg" alt="Send" class="w-4 h-4" />
                  </button>
                </div>
              </form>
            </div>
          </div>

          <!-- Bot Monitor Card - Diperbesar -->
          <div
            class="bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800 flex-1"
          >
            <div class="flex flex-col p-4 h-full">
              <h2 class="text-base font-semibold text-[#3be676] mb-2">
                Bot Monitor
              </h2>
              <label class="text-xs text-gray-600 mb-3">
                Session :
                <span class="text-xs font-bold"><%= sessionId %></span>
              </label>

              <!-- Bot Status -->
              <div class="flex gap-3 mb-4">
                <div class="bg-gray-50 rounded-lg p-2 flex-1">
                  <div class="flex items-center gap-2">
                    <span
                      id="botStatus"
                      class="w-2.5 h-2.5 rounded-full bg-gray-400"
                    ></span>
                    <span class="font-medium text-xs">Bot Status</span>
                  </div>
                  <p id="botStatusText" class="text-xs text-gray-600 mt-1">
                    Loading...
                  </p>
                </div>

                <div class="bg-gray-50 rounded-lg p-2 flex-1">
                  <div class="flex items-center gap-2">
                    <span class="w-2.5 h-2.5 rounded-full bg-blue-500"></span>
                    <span class="font-medium text-xs">API Status</span>
                  </div>
                  <p id="apiStatus" class="text-xs text-gray-600 mt-1">
                    Loading...
                  </p>
                </div>

                <div class="bg-gray-50 rounded-lg p-2 flex-1">
                  <div class="flex items-center gap-2">
                    <span class="w-2.5 h-2.5 rounded-full bg-purple-500"></span>
                    <span class="font-medium text-xs">Auto-Reply</span>
                  </div>
                  <p id="autoReplyStatus" class="text-xs text-gray-600 mt-1">
                    Loading...
                  </p>
                </div>
              </div>

              <!-- Bot Controls -->
              <div class="flex gap-2 mb-3">
                <button
                  id="enableBot"
                  onclick="toggleBot(true)"
                  class="bg-green-500 hover:bg-green-600 text-white font-semibold py-1.5 px-2 rounded-full transition-all text-xs"
                >
                  Enable
                </button>
                <button
                  id="disableBot"
                  onclick="toggleBot(false)"
                  class="bg-red-500 hover:bg-red-600 text-white font-semibold py-1.5 px-2 rounded-full transition-all text-xs"
                >
                  Disable
                </button>
                <a
                  href="/bot-monitor"
                  class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-1.5 px-2 rounded-full transition-all text-xs"
                >
                  Full
                </a>
              </div>

              <!-- API Testing -->
              <div class="mt-auto">
                <div class="flex gap-2 mb-2">
                  <input
                    type="text"
                    id="testKeyword"
                    placeholder="Test keyword..."
                    value="halo"
                    class="flex-1 border border-gray-300 rounded-full px-2 py-1 text-xs"
                  />
                  <button
                    onclick="testAPI()"
                    class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-1 px-2 rounded-full transition-all text-xs"
                  >
                    Test
                  </button>
                </div>
                <div id="apiResult" class="text-xs"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Column 2: Group List -->
        <div
          class="bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800"
        >
          <div class="flex flex-col p-6 h-full">
            <h3 class="text-lg font-semibold text-[#3be676] mb-4">
              Group List
            </h3>
            <div class="overflow-x-auto flex-1">
              <table class="w-full text-sm" id="groupTable">
                <thead>
                  <tr class="bg-gray-200">
                    <th class="py-2 px-2 text-left text-xs">Group Name</th>
                    <th class="py-2 px-2 text-left text-xs">Group ID</th>
                  </tr>
                </thead>
                <tbody id="groupList">
                  <tr>
                    <td
                      colspan="2"
                      class="text-center py-4 text-gray-400 text-xs"
                    >
                      Loading data...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div id="groupError" class="text-red-500 text-xs mt-2"></div>
            <div
              id="groupPagination"
              class="flex justify-between items-center mt-4"
            ></div>
          </div>
        </div>

        <!-- Column 3: API Documentation -->
        <div
          class="bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800"
        >
          <div class="flex flex-col p-6 h-full">
            <h3 class="text-lg font-semibold text-[#3be676] mb-4">
              API Documentation
            </h3>
            <div class="mb-4">
              <div class="font-semibold text-gray-800 mb-1 text-sm">
                Send Message to Number
              </div>
              <div class="text-xs text-gray-700 mb-1 flex items-center gap-2">
                <span
                  class="font-mono bg-gray-100 px-2 py-1 cursor-pointer copy-doc"
                  data-copy="<%= baseUrl %>/send-message"
                  title="Click to copy"
                >
                  [POST] <%= baseUrl %>/send-message
                </span>
              </div>
              <div class="text-xs text-gray-600 mb-1">Headers:</div>
              <pre
                class="bg-gray-100 px-3 py-2 text-xs text-gray-800 mb-1 cursor-pointer copy-session"
                data-copy="<%= sessionId %>"
                title="Click to copy"
              >
x-session-id: <%= sessionId %></pre
              >
              <div class="text-xs text-gray-600 mb-1">Body (JSON):</div>
              <pre class="bg-gray-100 px-3 py-2 text-xs text-gray-800 mb-1">
{
  "phoneNumber": "08xxxx or 628xxxx",
  "message": "Your message"
}</pre
              >
            </div>
            <div>
              <div class="font-semibold text-gray-800 mb-1 text-sm">
                Send Message to Group
              </div>
              <div class="text-xs text-gray-700 mb-1 flex items-center gap-2">
                <span
                  class="font-mono bg-gray-100 px-2 py-1 cursor-pointer copy-doc"
                  data-copy="<%= baseUrl %>/send-group-message"
                  title="Click to copy"
                >
                  [POST] <%= baseUrl %>/send-group-message
                </span>
              </div>
              <div class="text-xs text-gray-600 mb-1">Headers:</div>
              <pre
                class="bg-gray-100 px-3 py-2 text-xs text-gray-800 mb-1 cursor-pointer copy-session"
                data-copy="<%= sessionId %>"
                title="Click to copy"
              >
x-session-id: <%= sessionId %></pre
              >
              <div class="text-xs text-gray-600 mb-1">Body (JSON):</div>
              <pre class="bg-gray-100 px-3 py-2 text-xs text-gray-800 mb-1">
{
  "groupId": "GroupId",
  "message": "Your message"
}</pre
              >
            </div>
          </div>
        </div>
      </div>
    </main>

    <script>
      // Toast notification function
      function showTWToast({ type, message }) {
        const toast = document.createElement("div");
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-semibold ${
          type === "success" ? "bg-green-500" : "bg-red-500"
        }`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => {
          toast.remove();
        }, 3000);
      }

      // Send Message Form
      document.getElementById("sendForm").onsubmit = async function (e) {
        e.preventDefault();
        const sendBtn = this.querySelector('button[type="submit"]');
        const originalBtnContent = sendBtn.innerHTML;
        sendBtn.disabled = true;
        sendBtn.innerHTML =
          '<img src="icons/send-1.svg" alt="Send" class="w-6 h-6"> Sending...';

        await new Promise((resolve) => setTimeout(resolve, 500));

        const type = document.querySelector(
          'input[name="sendType"]:checked'
        ).value;
        const recipient = document.getElementById("phoneNumber").value;
        const message = document.getElementById("message").value;
        let url = "/send-message";
        let body = {};

        if (type === "number") {
          url = "/send-message";
          body = { phoneNumber: recipient, message };
        } else {
          url = "/send-group-message";
          body = { groupId: recipient, message };
        }

        try {
          const res = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "x-session-id": "<%= sessionId %>",
            },
            body: JSON.stringify(body),
          });
          const data = await res.json();
          if (data.status === "success") {
            showTWToast({ type: "success", message: "Message sent!" });
          } else {
            showTWToast({
              type: "error",
              message: data.message || "Failed to send message.",
            });
          }
        } catch (err) {
          showTWToast({
            type: "error",
            message: err.message || "Network error.",
          });
        } finally {
          sendBtn.disabled = false;
          sendBtn.innerHTML = originalBtnContent;
        }
      };

      // Group Management
      let allGroups = [];
      let currentPage = 1;
      const groupsPerPage = 10;

      function renderGroupTable() {
        const groupList = document.getElementById("groupList");
        const groupPagination = document.getElementById("groupPagination");
        groupList.innerHTML = "";
        groupPagination.innerHTML = "";

        if (allGroups.length === 0) {
          groupList.innerHTML =
            '<tr><td colspan="2" class="text-center py-4 text-gray-400 text-xs">No groups found.</td></tr>';
          return;
        }

        const totalPages = Math.ceil(allGroups.length / groupsPerPage);
        if (currentPage > totalPages) currentPage = totalPages;

        const startIdx = (currentPage - 1) * groupsPerPage;
        const endIdx = startIdx + groupsPerPage;
        const groupsToShow = allGroups.slice(startIdx, endIdx);

        groupsToShow.forEach((g) => {
          const tr = document.createElement("tr");
          tr.innerHTML = `
          <td class="text-xs text-gray-600 py-2 px-2 text-left">${g.name}</td>
          <td class="text-xs text-gray-600 py-2 px-2 text-left">
            <span class="copy-group-id cursor-pointer" data-copy="${g.id}" title="Click to copy">${g.id}</span>
          </td>
        `;
          groupList.appendChild(tr);
        });

        if (totalPages > 1) {
          const prevBtn = document.createElement("button");
          prevBtn.textContent = "Prev";
          prevBtn.className = "text-sm text-gray-600 cursor-pointer";
          prevBtn.disabled = currentPage === 1;
          prevBtn.onclick = () => {
            currentPage--;
            renderGroupTable();
          };

          const nextBtn = document.createElement("button");
          nextBtn.textContent = "Next";
          nextBtn.className = "text-sm text-gray-600 cursor-pointer";
          nextBtn.disabled = currentPage === totalPages;
          nextBtn.onclick = () => {
            currentPage++;
            renderGroupTable();
          };

          const pageInfo = document.createElement("span");
          pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
          pageInfo.className = "text-sm text-gray-600";

          groupPagination.appendChild(prevBtn);
          groupPagination.appendChild(pageInfo);
          groupPagination.appendChild(nextBtn);
        }

        addCopyListeners();
      }

      function addCopyListeners() {
        document.querySelectorAll(".copy-group-id").forEach((span) => {
          span.onclick = function () {
            const val = this.getAttribute("data-copy");
            navigator.clipboard.writeText(val);
            showTWToast({ type: "success", message: "Copied to clipboard!" });
          };
        });
        document.querySelectorAll(".copy-doc").forEach((span) => {
          span.onclick = function () {
            const val = this.getAttribute("data-copy");
            navigator.clipboard.writeText(val);
            showTWToast({ type: "success", message: "Copied to clipboard!" });
          };
        });
        document.querySelectorAll(".copy-session").forEach((span) => {
          span.onclick = function () {
            const val = this.getAttribute("data-copy");
            navigator.clipboard.writeText(val);
            showTWToast({ type: "success", message: "Session ID copied!" });
          };
        });
      }

      async function fetchGroups() {
        const res = await fetch("/groups", {
          headers: { "x-session-id": "<%= sessionId %>" },
        });
        const groupError = document.getElementById("groupError");
        groupError.innerText = "";
        const data = await res.json();
        if (data.status === "success") {
          allGroups = data.groups;
          currentPage = 1;
          renderGroupTable();
        } else {
          allGroups = [];
          renderGroupTable();
          groupError.innerText = data.message || "Failed to fetch group list.";
        }
      }

      // Form field updates
      const phoneInput = document.getElementById("phoneNumber");
      const sendTypeNumber = document.getElementById("sendTypeNumber");
      const sendTypeGroup = document.getElementById("sendTypeGroup");

      function updateRecipientField() {
        if (sendTypeNumber.checked) {
          phoneInput.placeholder = "Recipient Number (e.g. 08xxxx or 628xxxx)";
        } else {
          phoneInput.placeholder = "Group ID (e.g. 123456789-123456789@g.us)";
        }
      }

      sendTypeNumber.addEventListener("change", updateRecipientField);
      sendTypeGroup.addEventListener("change", updateRecipientField);
      updateRecipientField();

      // Bot Monitor Functions
      async function loadBotStatus() {
        try {
          const response = await fetch("/bot/status");
          const data = await response.json();

          const botStatus = document.getElementById("botStatus");
          const botStatusText = document.getElementById("botStatusText");
          const apiStatus = document.getElementById("apiStatus");
          const autoReplyStatus = document.getElementById("autoReplyStatus");

          if (data.bot.enabled) {
            botStatus.className = "w-3 h-3 rounded-full bg-green-500";
            botStatusText.textContent = "Enabled";
          } else {
            botStatus.className = "w-3 h-3 rounded-full bg-red-500";
            botStatusText.textContent = "Disabled";
          }

          apiStatus.textContent = `Connected: ${data.connectedSessions}/${data.totalSessions}`;

          if (data.connectedSessions > 0 && data.bot.enabled) {
            autoReplyStatus.textContent = "Active";
          } else {
            autoReplyStatus.textContent = "Inactive";
          }
        } catch (error) {
          console.error("Error loading bot status:", error);
        }
      }

      async function toggleBot(enabled) {
        try {
          const response = await fetch("/bot/toggle", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ enabled }),
          });
          const data = await response.json();

          if (data.success) {
            showTWToast({ type: "success", message: data.message });
            loadBotStatus();
          } else {
            showTWToast({ type: "error", message: data.error });
          }
        } catch (error) {
          console.error("Error toggling bot:", error);
          showTWToast({ type: "error", message: "Error toggling bot" });
        }
      }

      async function testAPI() {
        const keyword = document.getElementById("testKeyword").value;
        if (!keyword) {
          showTWToast({ type: "error", message: "Please enter a keyword" });
          return;
        }

        try {
          const response = await fetch("/bot/test-api", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ keyword }),
          });
          const data = await response.json();

          const apiResult = document.getElementById("apiResult");
          if (data.success) {
            apiResult.innerHTML = `
            <div class="bg-green-100 border border-green-400 text-green-700 px-3 py-2 rounded text-xs">
              <strong>Success!</strong><br>
              <strong>Response:</strong> ${data.response.substring(0, 80)}${
              data.response.length > 80 ? "..." : ""
            }
            </div>
          `;
          } else {
            apiResult.innerHTML = `
            <div class="bg-red-100 border border-red-400 text-red-700 px-3 py-2 rounded text-xs">
              <strong>Error:</strong> ${data.error}
            </div>
          `;
          }
        } catch (error) {
          console.error("Error testing API:", error);
          document.getElementById("apiResult").innerHTML = `
          <div class="bg-red-100 border border-red-400 text-red-700 px-3 py-2 rounded text-xs">
            <strong>Error:</strong> ${error.message}
          </div>
        `;
        }
      }

      // Initialize
      document.addEventListener("DOMContentLoaded", () => {
        addCopyListeners();
        fetchGroups();
        loadBotStatus();
        setInterval(loadBotStatus, 5000);
      });
    </script>
  </body>
</html>
