<!DOCTYPE html>
<html>
<head>
  <title>WhatsApp Gateway</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <!-- Tailwind CDN -->
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>
<body class="bg-[#fcf5eb] min-h-screen">
  <%- include('partials/topnav', { user: user, isIndex: true }) %>
  <main class="w-full items-center justify-center flex flex-col gap-6 pt-20">
    <div class="w-4xl bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800 p-8">
      <form action="/sessions" method="post" class="flex flex-col gap-3">
        <label for="numberId" class="font-medium text-gray-600">WhatsApp Number</label>
        <div class="flex gap-3">
          <input type="text" id="numberId" name="numberId" placeholder="Number (e.g. 08xxxx or 628xxxx)" required
            pattern="\d*" inputmode="numeric"
            class="flex-1 border border-gray-800 rounded-full px-4 py-2" />
          <button type="submit"
            class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2.5 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
            Add Number
          </button>
        </div>
      </form>
    </div>
    
    <!-- Sessions Section -->
    <section id="sessions" class="mb-6 min-w-4xl">
          <div class="w-full bg-white/90 backdrop-blur-sm rounded-[25px] shadow-xl border border-gray-800 overflow-hidden">
            <table class="w-full text-sm">
              <thead>
                <tr class="bg-gray-200 text-gray-700">
                  <th class="py-4 px-4 text-left">User</th>
                  <th class="py-4 px-4 text-center">Status</th>
                  <th class="py-4 px-4 text-center">Company</th>
                  <th></th>
                </tr>
              </thead>
              <tbody id="sessionTable">
                <tr>
                  <td colspan="6" class="text-center py-4 text-gray-400">Loading data...</td>
                </tr>
              </tbody>
            </table>
          </div>
      </section>
    </div>
  </main>
  
  <!-- Custom Confirm Modal -->
  <div id="confirmModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 hidden">
    <div class="bg-white/50 backdrop-blur-md rounded-2xl shadow-xl p-8 max-w-sm w-full text-center">
      <h3 class="text-lg font-semibold mb-4 text-gray-800" id="confirmModalTitle">Confirm Action</h3>
      <p class="mb-6 text-gray-700" id="confirmModalMessage">Are you sure you want to proceed?</p>
      <div class="flex justify-center gap-4">
        <button id="confirmModalCancel" class="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold transition-all">Cancel</button>
        <button id="confirmModalOk" class="px-4 py-2 rounded-full bg-red-500 hover:bg-red-600 text-white font-semibold transition-all">Yes, Delete</button>
      </div>
    </div>
  </div>

  <script>
    async function loadSessions() {
      const res = await fetch('/sessions');
      const data = await res.json();
      const tbody = document.getElementById('sessionTable');
      tbody.innerHTML = '';
             if (data.sessions && data.sessions.length > 0) {
         data.sessions.forEach(s => {
           const tr = document.createElement('tr');
           tr.setAttribute('data-session-id', s.sessionId);
           tr.innerHTML = `
             <td class="py-4 px-4">
               <div class="inline-flex items-center">
                 <img src="https://ui-avatars.com/api/?name=${s.owner}" alt="User Avatar" class="w-8 h-8 rounded-full border border-gray-300 mr-2">
                 <div class="flex flex-col">
                   <span class="text-md text-gray-700">${s.owner || '-'}</span>
                   <span class="text-xs text-gray-500">${s.numberId}</span>
                 </div>
               </div>
             </td>
             <td class="py-4 px-4 items-center status-cell">
               <div class="inline-flex items-center ${s.isConnected ? 'bg-green-300/20' : 'bg-red-300/20'} px-2 py-2 rounded-full">
                 <span class="inline-block w-3 h-3 rounded-full ${s.isConnected ? 'bg-green-500' : 'bg-red-400'}"></span>
                 <div class="flex flex-col px-4">
                 ${s.isConnected ? '<span class="text-green-600 font-semibold">Connected</span>' : '<span class="text-red-500">Disconnected</span>'}
                 <span class="text-xs text-gray-500">${s.connectedAt ? timeAgo(new Date(s.connectedAt)) : 'Waiting for scan...'}</span>
                 </div>
               </div>
             </td>
             <td class="py-4 px-4 text-center">
                 <span class="text-sm text-gray-600">${s.ownerCompany || '-'}</span>
             </td>
             <td class="py-4 px-4 flex flex-row gap-2 justify-end items-center">
               <a href="/qr?sessionId=${s.sessionId}&numberId=${s.numberId}" class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2 px-6 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md">
                 <img src="icons/qr-code.svg" alt="QR Scan" class="w-6 h-6">
               </a>
               <button type="button" onclick="deleteSession('${s.sessionId}')"
                 class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2.5 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
                 <img src="icons/trash-bin-trash.svg" class="h-6 w-6 inline-block">
               </button>
               <button type="button" onclick="disconnectSession('${s.sessionId}')"
                 class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2.5 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
                 Disconnect
               </button>
               <button type="button" onclick="forceConnect('${s.sessionId}')"
                 class="bg-white hover:bg-gray-50 text-gray-600 font-semibold py-2.5 px-4 rounded-full transition-all transform hover:scale-[1.02] active:scale-95 border border-gray-800 shadow-sm hover:shadow-md cursor-pointer">
                 Force Connect
               </button>
             </td>
           `;
           tbody.appendChild(tr);
         });
      } else {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center py-4 text-gray-400">No active sessions.</td></tr>';
      }
    }
    loadSessions();
    
    // Auto-refresh sessions every 5 seconds for better real-time updates
    setInterval(loadSessions, 5000);
    
    // Setup SSE for real-time status updates
    setupSSE();

    async function disconnectSession(sessionId) {
      const confirmed = await showCustomConfirm({
        title: "Disconnect Session",
        message: "Are you sure you want to disconnect this session?",
        okText: "Yes, Disconnect",
        cancelText: "Cancel"
      });
      if (!confirmed) return;
      const res = await fetch('/disconnect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-session-id': sessionId
        },
        body: JSON.stringify({ sessionId })
      });
      const data = await res.json();
      showTWToast({ type: data.status === 'success' ? 'success' : 'error', message: data.status === 'success' ? 'Disconnect successful' : 'Disconnect failed: ' + data.message });
      loadSessions();
    }

    async function forceConnect(sessionId) {
      const confirmed = await showCustomConfirm({
        title: "Force Connect Session",
        message: "Are you sure you want to force connect this session?",
        okText: "Yes, Force Connect",
        cancelText: "Cancel"
      });
      if (!confirmed) return;
      
      try {
        const res = await fetch(`/sessions/${sessionId}/status`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ isConnected: true })
        });
        const data = await res.json();
        showTWToast({ type: data.status === 'success' ? 'success' : 'error', message: data.message });
        loadSessions();
      } catch (error) {
        showTWToast({ type: 'error', message: 'Failed to force connect session' });
      }
    }

    function timeAgo(date) {
      const seconds = Math.floor((new Date() - date) / 1000);
      let interval = Math.floor(seconds / 31536000);
      
      if (interval >= 1) {
        return interval + " year" + (interval > 1 ? "s" : "") + " ago";
      }
      interval = Math.floor(seconds / 2592000);
      if (interval >= 1) {
        return interval + " month" + (interval > 1 ? "s" : "") + " ago";
      }
      interval = Math.floor(seconds / 86400);
      if (interval >= 1) {
        return interval + " day" + (interval > 1 ? "s" : "") + " ago";
      }
      interval = Math.floor(seconds / 3600);
      if (interval >= 1) {
        return interval + " hour" + (interval > 1 ? "s" : "") + " ago";
      }
      interval = Math.floor(seconds / 60);
      if (interval >= 1) {
        return interval + " minute" + (interval > 1 ? "s" : "") + " ago";
      }
      return "a few seconds ago";
    }

    // Custom Confirm Modal Logic
    function showCustomConfirm({ title = "Confirm", message = "Are you sure?", okText = "OK", cancelText = "Cancel" }) {
      return new Promise((resolve) => {
        const modal = document.getElementById('confirmModal');
        document.getElementById('confirmModalTitle').textContent = title;
        document.getElementById('confirmModalMessage').textContent = message;
        document.getElementById('confirmModalOk').textContent = okText;
        document.getElementById('confirmModalCancel').textContent = cancelText;
        modal.classList.remove('hidden');

        function cleanup(result) {
          modal.classList.add('hidden');
          okBtn.removeEventListener('click', okHandler);
          cancelBtn.removeEventListener('click', cancelHandler);
          resolve(result);
        }

        const okBtn = document.getElementById('confirmModalOk');
        const cancelBtn = document.getElementById('confirmModalCancel');
        function okHandler() { cleanup(true); }
        function cancelHandler() { cleanup(false); }
        okBtn.addEventListener('click', okHandler);
        cancelBtn.addEventListener('click', cancelHandler);
      });
    }

    async function deleteSession(sessionId) {
      const confirmed = await showCustomConfirm({
        title: "Delete Session",
        message: "Are you sure you want to delete this session?",
        okText: "Yes, Delete",
        cancelText: "Cancel"
      });
      if (!confirmed) return;
      fetch(`/sessions/${sessionId}`, {
        method: 'DELETE'
      })
      .then(res => res.json())
      .then(data => {
        showTWToast({ type: data.status === 'success' ? 'success' : 'error', message: data.message });
        if (data.status === 'success') {
          setTimeout(() => location.reload(), 3000);
        }
      })
      .catch(err => {
        showTWToast({ type: 'error', message: 'Failed to delete session' });
      });
    }

    // Toast notification function
    function showTWToast({ type, message }) {
      const toast = document.createElement('div');
      let bgColor = 'bg-red-500';
      if (type === 'success') bgColor = 'bg-green-500';
      else if (type === 'info') bgColor = 'bg-blue-500';
      
      toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-semibold ${bgColor}`;
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.remove();
      }, 3000);
    }

    // Setup SSE for real-time status updates
    function setupSSE() {
      // Get all session IDs from the current table
      const sessionRows = document.querySelectorAll('#sessionTable tr');
      sessionRows.forEach(row => {
        const sessionId = row.getAttribute('data-session-id');
        if (sessionId) {
          connectSSE(sessionId);
        }
      });
    }

    // Connect to SSE for a specific session
    function connectSSE(sessionId) {
      const eventSource = new EventSource(`/status?sessionId=${sessionId}`);
      
      eventSource.onmessage = function(event) {
        try {
          const status = JSON.parse(event.data);
          updateSessionStatus(sessionId, status);
        } catch (error) {
          console.error('Error parsing SSE data:', error);
        }
      };
      
      eventSource.onerror = function(error) {
        console.error('SSE connection error:', error);
        eventSource.close();
      };
    }

    // Update session status in the UI
    function updateSessionStatus(sessionId, status) {
      const row = document.querySelector(`tr[data-session-id="${sessionId}"]`);
      if (row) {
        const statusCell = row.querySelector('.status-cell');
        if (statusCell) {
          const isConnected = status.isConnected;
          const statusHtml = `
            <div class="inline-flex items-center ${isConnected ? 'bg-green-300/20' : 'bg-red-300/20'} px-2 py-2 rounded-full">
              <span class="inline-block w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-400'}"></span>
              <div class="flex flex-col px-4">
                ${isConnected ? '<span class="text-green-600 font-semibold">Connected</span>' : '<span class="text-red-500">Disconnected</span>'}
                <span class="text-xs text-gray-500">${status.connectedAt ? timeAgo(new Date(status.connectedAt)) : 'Waiting for scan...'}</span>
              </div>
            </div>
          `;
          statusCell.innerHTML = statusHtml;
        }
      }
    }

    // Handle Add Number form submit
    document.querySelector('form[action="/sessions"]').addEventListener('submit', async function(e) {
      e.preventDefault();
      const numberId = this.numberId.value;
      const submitBtn = this.querySelector('button[type="submit"]');
      
      if (!/^\d+$/.test(numberId)) {
        showTWToast({ type: 'error', message: 'Number ID must be numeric.' });
        return;
      }
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.textContent = 'Adding...';
      showTWToast({ type: 'info', message: 'Adding WhatsApp number...' });
      
      try {
        const res = await fetch('/sessions', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ numberId })
        });

        if (res.redirected) {
          // Jika sukses, redirect ke QR
          showTWToast({ type: 'success', message: 'Number added successfully! Redirecting to QR...' });
          setTimeout(() => {
            window.location.href = res.url;
          }, 1000);
          return;
        }

        const data = await res.json();
        if (data.status === 'error') {
          showTWToast({ type: 'error', message: data.message });
        } else {
          showTWToast({ type: 'success', message: 'Number added successfully!' });
          loadSessions(); // Refresh sessions list
        }
      } catch (error) {
        showTWToast({ type: 'error', message: 'Failed to add number. Please try again.' });
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.textContent = 'Add Number';
      }
    });
  </script>
</body>
</html>